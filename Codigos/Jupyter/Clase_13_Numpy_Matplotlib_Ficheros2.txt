import numpy as np
import matplotlib.pyplot as plt

def analizar_gastos(archivo):
    dias = []
    categorias = {'comida': [], 'transporte': [], 'entretenimiento': []}

    with open(archivo, 'r') as f:
        for linea in f:
            datos = linea.split()
            dias.append(int(datos[0]))
            categorias['comida'].append(float(datos[1]))
            categorias['transporte'].append(float(datos[2]))
            categorias['entretenimiento'].append(float(datos[3]))

    total_comida = np.sum(categorias['comida'])
    total_transporte = np.sum(categorias['transporte'])
    total_entretenimiento = np.sum(categorias['entretenimiento'])

    print(f"Gasto total en comida: {total_comida}, Transporte: {total_transporte}, Entretenimiento: {total_entretenimiento}")

    categorias_totales = [total_comida, total_transporte, total_entretenimiento]
    nombres_categorias = ['Comida', 'Transporte', 'Entretenimiento']

    plt.bar(nombres_categorias, categorias_totales, color=['blue', 'green', 'red'])
    plt.title('Gastos Totales por Categoría')
    plt.xlabel('Categoría')
    plt.ylabel('Gasto Total')
    plt.show()

analizar_gastos("/content/drive/MyDrive/Colab Notebooks/00_TPAII_2024/datos/gastos.txt")


import numpy as np
import matplotlib.pyplot as plt

def analizar_ejercicio(archivo):
    dias = []
    tiempos = []

    with open(archivo, 'r') as f:
        for linea in f:
            dia, tiempo = linea.split()
            dias.append(dia)
            tiempos.append(float(tiempo))

    tiempos = np.array(tiempos)

    tiempo_promedio = np.mean(tiempos)
    print(f"Tiempo promedio de ejercicio diario: {tiempo_promedio:.2f} horas")

    plt.bar(dias, tiempos, color='orange')
    plt.axhline(y = tiempo_promedio , color = 'r', linestyle = '-')
    plt.title('Horas de Ejercicio por Día')
    plt.xlabel('Día de la semana')
    plt.ylabel('Horas de ejercicio')
    plt.grid(True)
    plt.show()


analizar_ejercicio("/content/drive/MyDrive/Colab Notebooks/00_TPAII_2024/datos/ejercicio.txt")

import numpy as np
import matplotlib.pyplot as plt

def analizar_consumo(archivo):
    dias = []
    consumo = []

    with open(archivo, 'r') as f:
        for linea in f:
            dia, kwh = linea.split()
            dias.append(int(dia))
            consumo.append(float(kwh))

    consumo = np.array(consumo)

    consumo_total = np.sum(consumo)
    consumo_promedio = np.mean(consumo)

    print(f"Consumo total del mes: {consumo_total} kWh")
    print(f"Consumo promedio diario: {consumo_promedio:.2f} kWh")

    plt.plot(dias, consumo, color='purple', marker='o')
    plt.axhline(y = consumo_promedio , color = 'r', linestyle = '-')
    plt.title('Consumo Eléctrico Diario (kWh)')
    plt.xlabel('Día del mes')
    plt.ylabel('Consumo (kWh)')
    plt.grid(True)
    plt.show()

analizar_consumo("/content/drive/MyDrive/Colab Notebooks/00_TPAII_2024/datos/consumo.txt")

import numpy as np
import matplotlib.pyplot as plt

def analizar_actividades(archivo):
    categorias = ['Trabajo', 'Estudios', 'Ejercicio', 'Ocio']
    horas_totales = np.zeros(len(categorias))

    with open(archivo, 'r') as f:
        for linea in f:
            horas = linea.split()
            for i in range(len(horas)):
                horas_totales[i] += float(horas[i])

    # Mostrar resultados
    for i, categoria in enumerate(categorias):
        print(f"Horas totales dedicadas a {categoria}: {horas_totales[i]}")

    # Crear gráfico de pastel
    plt.pie(horas_totales, labels=categorias, autopct='%1.1f%%', startangle=90, colors=['skyblue', 'lightgreen', 'orange', 'lightcoral'])
    plt.title('Distribución del tiempo dedicado a actividades diarias durante la semana')
    plt.show()

analizar_actividades("/content/drive/MyDrive/Colab Notebooks/00_TPAII_2024/datos/actividades.txt")

import numpy as np
import matplotlib.pyplot as plt

def analizar_rendimiento(ruta):
    materias = ['matematicas.txt', 'ciencias.txt', 'historia.txt']
    estudiantes = {}

    for materia in materias:
        with open(ruta+materia, 'r') as archivo:
            for linea in archivo:
                nombre, calificacion = linea.split()
                calificacion = float(calificacion)
                if nombre not in estudiantes:
                    estudiantes[nombre] = []
                estudiantes[nombre].append(calificacion)

    nombres = list(estudiantes.keys())
    promedios = [np.mean(estudiantes[nombre]) for nombre in nombres]

    plt.bar(nombres, promedios, color=['blue','red','green','yellow'])
    plt.xlabel('Estudiantes')
    plt.ylabel('Promedio de Calificaciones')
    plt.title('Promedio de Calificaciones por Estudiante')
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()

# Ejemplo de ejecución
analizar_rendimiento("/content/drive/MyDrive/Colab Notebooks/00_TPAII_2024/datos/")


import numpy as np
import matplotlib.pyplot as plt

def analizar_rendimiento_asignatura(ruta):
    materias = ['matematicas.txt', 'ciencias.txt', 'historia.txt']
    nombres_materias = ['Matemáticas', 'Ciencias', 'Historia']
    estudiantes = {}

    # Leer las calificaciones de los archivos
    for materia in materias:
        with open(ruta+materia, 'r') as archivo:
            for linea in archivo:
                nombre, calificacion = linea.split()
                calificacion = float(calificacion)
                if nombre not in estudiantes:
                    estudiantes[nombre] = [[], [], []]  # Tres listas, una por materia

                # Asignar las calificaciones a la materia correcta
                indice_materia = materias.index(materia)
                estudiantes[nombre][indice_materia].append(calificacion)

    # Calcular los promedios por estudiante y por materia
    nombres_estudiantes = list(estudiantes.keys())
    promedios_matematicas = [np.mean(estudiantes[nombre][0]) for nombre in nombres_estudiantes]
    promedios_ciencias = [np.mean(estudiantes[nombre][1]) for nombre in nombres_estudiantes]
    promedios_historia = [np.mean(estudiantes[nombre][2]) for nombre in nombres_estudiantes]

    # Crear subplots
    fig, axs = plt.subplots(1, 3, figsize=(15, 5))

    # Subplot para Matemáticas
    axs[0].bar(nombres_estudiantes, promedios_matematicas, color='blue')
    axs[0].set_title('Promedio de Matemáticas')
    axs[0].set_xlabel('Estudiantes')
    axs[0].set_ylabel('Promedio')
    axs[0].tick_params(axis='x', rotation=45)

    # Subplot para Ciencias
    axs[1].bar(nombres_estudiantes, promedios_ciencias, color='green')
    axs[1].set_title('Promedio de Ciencias')
    axs[1].set_xlabel('Estudiantes')
    axs[1].tick_params(axis='x', rotation=45)

    # Subplot para Historia
    axs[2].bar(nombres_estudiantes, promedios_historia, color='orange')
    axs[2].set_title('Promedio de Historia')
    axs[2].set_xlabel('Estudiantes')
    axs[2].tick_params(axis='x', rotation=45)

    plt.tight_layout()
    plt.show()

# Ejemplo de ejecución
analizar_rendimiento_asignatura("/content/drive/MyDrive/Colab Notebooks/00_TPAII_2024/datos/")


import numpy as np
import matplotlib.pyplot as plt

def analizar_ventas(ruta):
    tiendas = ['tienda1.txt', 'tienda2.txt', 'tienda3.txt']
    ventas_por_tienda = []

    for tienda in tiendas:
        dias = []
        ventas = []
        with open(ruta+tienda, 'r') as archivo:
            for linea in archivo:
                dia, venta = linea.split()
                dias.append(int(dia))
                ventas.append(float(venta))
        ventas_por_tienda.append((dias, ventas))

    for i, (dias, ventas) in enumerate(ventas_por_tienda):
        plt.plot(dias, ventas, label=f'Tienda {i+1}')

    plt.xlabel('Día del mes')
    plt.ylabel('Ventas ($)')
    plt.title('Evolución de las Ventas Diarias por Tienda')
    plt.legend()
    plt.grid(True)
    plt.show()

# Ejemplo de ejecución
analizar_ventas("/content/drive/MyDrive/Colab Notebooks/00_TPAII_2024/datos/")


import numpy as np
import matplotlib.pyplot as plt
import os

def analizar_ventas(carpeta):
    archivos_tienda = os.listdir(carpeta)  # Obtener todos los archivos en la carpeta
    archivos_filtrados = []  # Lista para almacenar los archivos que cumplen las condiciones

    # Filtrar archivos que contienen "tienda" y terminan en ".txt"
    for archivo in archivos_tienda:
        if 'tienda' in archivo and archivo.endswith('.txt'):
            archivos_filtrados.append(archivo)

    ventas_por_tienda = []
    dias_totales = None

    # Leer las ventas de cada archivo filtrado
    for archivo in archivos_filtrados:
        dias = []
        ventas = []
        ruta_archivo = os.path.join(carpeta, archivo)

        # Abrir archivo y procesar línea por línea
        with open(ruta_archivo, 'r') as f:
            for linea in f:
                dia, venta = linea.split()
                dias.append(int(dia))
                ventas.append(float(venta))

        ventas_por_tienda.append((dias, ventas))

        # Establecer los días solo una vez
        if dias_totales is None:
            dias_totales = dias

    # Graficar las ventas diarias para cada tienda
    for i in range(len(ventas_por_tienda)):
        dias, ventas = ventas_por_tienda[i]
        plt.plot(dias, ventas, label=f'Tienda {i+1}')

    # Etiquetas y detalles del gráfico
    plt.xlabel('Día del mes')
    plt.ylabel('Ventas ($)')
    plt.title('Evolución de las Ventas Diarias por Tienda')

analizar_ventas("/content/drive/MyDrive/Colab Notebooks/00_TPAII_2024/datos/")


import numpy as np
import matplotlib.pyplot as plt
import os

def analizar_consumo_agua(carpeta):
    archivos_hogar = os.listdir(carpeta)  # Listar todos los archivos en la carpeta
    archivos_filtrados = []  # Lista para almacenar los archivos filtrados

    # Filtrar archivos que comiencen con "hogar" y terminen en ".txt"
    for archivo in archivos_hogar:
        if archivo.startswith('hogar') and archivo.endswith('.txt'):
            archivos_filtrados.append(archivo)

    consumos_por_hogar = []
    dias_totales = None

    # Leer los consumos de cada archivo filtrado
    for archivo in archivos_filtrados:
        dias = []
        consumos = []
        ruta_archivo = os.path.join(carpeta, archivo)

        # Abrir archivo y procesar línea por línea
        with open(ruta_archivo, 'r') as f:
            for linea in f:
                dia, consumo = linea.split()
                dias.append(int(dia))
                consumos.append(float(consumo))

        consumos_por_hogar.append((dias, consumos))

        # Establecer los días solo una vez
        if dias_totales is None:
            dias_totales = dias

    # Graficar el consumo diario de agua para cada hogar
    for i in range(len(consumos_por_hogar)):
        dias, consumos = consumos_por_hogar[i]
        plt.plot(dias, consumos, label=f'Hogar {i+1}')

    # Etiquetas y detalles del gráfico
    plt.xlabel('Día del mes')
    plt.ylabel('Consumo de agua (litros)')
    plt.title('Consumo diario de agua por hogar')
    plt.legend(loc='center left', bbox_to_anchor=(1, 0.5))
    plt.grid(True)
    plt.show()

# Ejemplo de ejecución
analizar_consumo_agua('/content/drive/MyDrive/Colab Notebooks/00_TPAII_2024/datos/')


import numpy as np
import matplotlib.pyplot as plt
import os

def analizar_productividad(carpeta):
    archivos_empleados = os.listdir(carpeta)  # Listar todos los archivos en la carpeta
    archivos_filtrados = []

    # Filtrar archivos que comiencen con "empleado" y terminen en ".txt"
    for archivo in archivos_empleados:
        if archivo.startswith('empleado') and archivo.endswith('.txt'):
            archivos_filtrados.append(archivo)

    productividad_por_empleado = []
    dias_totales = None

    # Leer las horas dedicadas por tipo de tarea de cada archivo filtrado
    for archivo in archivos_filtrados:
        dias = []
        horas_administrativas = []
        horas_productivas = []
        horas_comunicativas = []
        horas_reuniones = []

        ruta_archivo = os.path.join(carpeta, archivo)

        with open(ruta_archivo, 'r') as f:
            for linea in f:
                dia, adm, prod, com, reun = linea.split()
                dias.append(int(dia))
                horas_administrativas.append(float(adm))
                horas_productivas.append(float(prod))
                horas_comunicativas.append(float(com))
                horas_reuniones.append(float(reun))

        productividad_por_empleado.append({
            'dias': dias,
            'administrativas': horas_administrativas,
            'productivas': horas_productivas,
            'comunicativas': horas_comunicativas,
            'reuniones': horas_reuniones
        })

        if dias_totales is None:
            dias_totales = dias

    # Graficar la productividad por tipo de tarea para cada empleado
    for i, datos in enumerate(productividad_por_empleado):
        plt.figure(figsize=(12, 8))
        plt.plot(datos['dias'], datos['administrativas'], label='Administrativas', marker='o')
        plt.plot(datos['dias'], datos['productivas'], label='Productivas', marker='o')
        plt.plot(datos['dias'], datos['comunicativas'], label='Comunicativas', marker='o')
        plt.plot(datos['dias'], datos['reuniones'], label='Reuniones', marker='o')

        # Etiquetas y detalles del gráfico
        plt.xlabel('Día del mes')
        plt.ylabel('Horas dedicadas')
        plt.title(f'Productividad del Empleado {i+1}')
        plt.legend(loc='center left', bbox_to_anchor=(1, 0.5))
        plt.grid(True)
        plt.tight_layout()
        plt.show()

# Ejemplo de ejecución
analizar_productividad('/content/drive/MyDrive/Colab Notebooks/00_TPAII_2024/datos/Trabajadores')



import numpy as np
import matplotlib.pyplot as plt
import os

def analizar_productividad(carpeta):
    archivos_empleados = os.listdir(carpeta)  # Listar todos los archivos en la carpeta
    archivos_filtrados = []

    # Filtrar archivos que comiencen con "empleado" y terminen en ".txt"
    for archivo in archivos_empleados:
        if archivo.startswith('empleado') and archivo.endswith('.txt'):
            archivos_filtrados.append(archivo)

    dias_totales = None
    horas_administrativas = []
    horas_productivas = []
    horas_comunicativas = []
    horas_reuniones = []
    nombres_empleados = []

    # Leer las horas dedicadas por tipo de tarea de cada archivo filtrado
    for archivo in archivos_filtrados:
        dias = []
        adm = []
        prod = []
        com = []
        reun = []

        ruta_archivo = os.path.join(carpeta, archivo)

        with open(ruta_archivo, 'r') as f:
            for linea in f:
                dia, horas_adm, horas_prod, horas_com, horas_reun = linea.split()
                dias.append(int(dia))
                adm.append(float(horas_adm))
                prod.append(float(horas_prod))
                com.append(float(horas_com))
                reun.append(float(horas_reun))

        # Acumular las horas para cada tipo de tarea
        horas_administrativas.append(np.mean(adm))
        horas_productivas.append(np.mean(prod))
        horas_comunicativas.append(np.mean(com))
        horas_reuniones.append(np.mean(reun))
        nombres_empleados.append(archivo)

    # Crear una figura y ejes para los subplots
    fig, axs = plt.subplots(2, 2, figsize=(14, 10))

    # Graficar las horas dedicadas a cada tipo de tarea en cada subplot
    for i, actividad in enumerate(['administrativas', 'productivas', 'comunicativas', 'reuniones']):
        ax = axs[i // 2, i % 2]
        if actividad == 'administrativas':
            ax.bar(nombres_empleados, horas_administrativas, color='blue')
            ax.set_title('Horas Administrativas')
        elif actividad == 'productivas':
            ax.bar(nombres_empleados, horas_productivas, color='orange')
            ax.set_title('Horas Productivas')
        elif actividad == 'comunicativas':
            ax.bar(nombres_empleados, horas_comunicativas, color='green')
            ax.set_title('Horas Comunicativas')
        elif actividad == 'reuniones':
            ax.bar(nombres_empleados, horas_reuniones, color='red')
            ax.set_title('Horas en Reuniones')

        ax.set_xlabel('Empleado')
        ax.set_ylabel('Horas promedio')
        ax.tick_params(axis='x', rotation=45)
        ax.grid(True)

    # Ajustar el diseño para que no se sobrepongan los subplots
    plt.tight_layout()
    plt.show()

# Ejemplo de ejecución
analizar_productividad('/content/drive/MyDrive/Colab Notebooks/00_TPAII_2024/datos/Trabajadores')

